df_test <- read.csv(file = "data/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
df_train <- read.csv(file = "data/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
trainingset <- createDataPartition(y=df_train$classe, p=0.6, list=FALSE)
df_train2 <- df_train[trainingset, ];
validation <- df_train[-trainingset, ]
nearZeroVariance = nearZeroVar(df_train2, saveMetrics=TRUE)
col_nearZeroVariance = nearZeroVar(df_train2, saveMetrics=FALSE)
df_train2 = df_train2[,-col_nearZeroVariance]
df_train2 = df_train2[,-1]
df_train2[is.na(df_train2)] = 0
## Delete columns
df_test = df_test[,-col_nearZeroVariance]
df_test = df_test[,-1]
validation = validation[,-col_nearZeroVariance]
validation = validation[,-1]
## Clean data of NA
df_test[is.na(df_test)] = 0
validation[is.na(validation)] = 0
tree1 <- rpart(classe ~ ., data=df_train2, method="class")
pred_tree1 <- predict(tree1, validation, type = "class")
confusionMatrix(pred_tree1, validation$classe)
forest1 <- randomForest(classe ~. , data=df_train2)
pred_forest1 <- predict(forest1, validation, type = "class")
confusionMatrix(pred_forest1, validation$classe)
predict(forest1, df_test, type="class")
lapply(df_test,class)
lapply(validation,class)
class1 = lapply(df_test,class)
class2 = lapply(validation,class)
class1 != class2
class1 = sapply(df_test,class)
class2 = sapply(validation,class)
class1 != class2
class1 = sapply(df_test,class)
class1
class2 = sapply(validation,class)
class2
class1 = sapply(df_test,class)
class2 = sapply(validation,class)
class1 != class2
which(class1 != class2)
df_test$magnet_dumbbell_x = as.numeric(df_test$magnet_dumbbell_x)
df_test$magnet_forearm_y   = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z         = as.numeric(df_test$magnet_forearm_z        )
df_test$problem_id  = as.numeric(df_test$problem_id )
which(class1 != class2)
class1 = sapply(df_test,class)
class2 = sapply(validation,class)
class1 != class2
which(class1 != class2)
class1[which(class1 != class2)]
class2[which(class1 != class2)]
class1[which(class1 != class2)]
class2[which(class1 != class2)]
class1[which(class1 != class2)]
class2[which(class1 != class2)]
class2[which(class1 != class2)]
class2[which(class1 != class2)]
df_test$magnet_dumbbell_x = as.integer(df_test$magnet_dumbbell_x)
df_test$magnet_dumbbell_z = as.numeric(df_test$magnet_dumbbell_z)
df_test$magnet_forearm_y = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z = as.numeric(df_test$magnet_forearm_z        )
df_test$problem_id  = as.numeric(df_test$problem_id )
class1 = sapply(df_test,class)
class2 = sapply(validation,class)
which(class1 != class2)
class1[which(class1 != class2)]
class2[which(class1 != class2)]
df_test$problem_id
validation$problem_id
df_test = df_test[,-"problem_id"]
df_test = df_test[,-c("problem_id")]
df_test = df_test[,-name]
name = "problem_id"
df_test = df_test[,-name]
df_test
subset(df_test, select = -c("problem_id"))
subset(df_test, select = -c(problem_id))
View(df_test)
predict(forest1, df_test, type="class")
df_test2 <- rbind(validation[1, ] , df_test)
colnames(df_test2)
df_test2 <- rbind(validation[1, ] , df_test)
knitr::opts_chunk$set(echo = TRUE)
install_load <- function (package1, ...){
packages <- c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
set.seed(1337)
install_load("caret","randomForest","rpart","e1071")
df_test <- read.csv(file = "data/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
df_train <- read.csv(file = "data/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
trainingset <- createDataPartition(y=df_train$classe, p=0.6, list=FALSE)
df_train2 <- df_train[trainingset, ];
validation <- df_train[-trainingset, ]
nearZeroVariance = nearZeroVar(df_train2, saveMetrics=TRUE)
col_nearZeroVariance = nearZeroVar(df_train2, saveMetrics=FALSE)
df_train2 = df_train2[,-col_nearZeroVariance]
df_train2 = df_train2[,-1]
df_train2[is.na(df_train2)] = 0
## Delete columns in test and validation
df_test = df_test[,-col_nearZeroVariance]
df_test = df_test[,-1]
df_test = subset(df_test, select = -c(problem_id))
validation = validation[,-col_nearZeroVariance]
validation = validation[,-1]
## Clean data of NA
df_test[is.na(df_test)] = 0
validation[is.na(validation)] = 0
colnames(df_test)
colnames(validation)
colnames(df_test) == colnames(validation)
which(colnames(df_test) != colnames(validation))
df_test$classe = 0
which(colnames(df_test) != colnames(validation))
which(colnames(df_test) != colnames(validation))
data.frame(colnames(df_test),sapply(df_test,class),sapply(validation,class))
which(colnames(df_test) != colnames(validation))
data.frame(sapply(df_test,class),sapply(validation,class))
testframe(which(testframe$sapply.df_test..class. != sapprly.validation..class.))
testframe[which(testframe$sapply.df_test..class. != sapprly.validation..class.)]
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
testframe[which(testframe$sapply.df_test..class. != sapprly.validation..class.)]
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.)]
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.)]
which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.)
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.),]
knitr::opts_chunk$set(echo = TRUE)
install_load <- function (package1, ...){
packages <- c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
set.seed(1337)
install_load("caret","randomForest","rpart","e1071")
df_test <- read.csv(file = "data/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
df_train <- read.csv(file = "data/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
trainingset <- createDataPartition(y=df_train$classe, p=0.6, list=FALSE)
df_train2 <- df_train[trainingset, ];
validation <- df_train[-trainingset, ]
nearZeroVariance = nearZeroVar(df_train2, saveMetrics=TRUE)
col_nearZeroVariance = nearZeroVar(df_train2, saveMetrics=FALSE)
df_train2 = df_train2[,-col_nearZeroVariance]
df_train2 = df_train2[,-1]
df_train2[is.na(df_train2)] = 0
## Delete columns in test and validation
df_test = df_test[,-col_nearZeroVariance]
df_test = df_test[,-1]
df_test$classe = 0
validation = validation[,-col_nearZeroVariance]
validation = validation[,-1]
## Clean data of NA
df_test[is.na(df_test)] = 0
validation[is.na(validation)] = 0
which(colnames(df_test) != colnames(validation))
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
which(colnames(df_test) != colnames(validation))
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
knitr::opts_chunk$set(echo = TRUE)
install_load <- function (package1, ...){
packages <- c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
set.seed(1337)
install_load("caret","randomForest","rpart","e1071")
df_test <- read.csv(file = "data/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
df_train <- read.csv(file = "data/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
trainingset <- createDataPartition(y=df_train$classe, p=0.6, list=FALSE)
df_train2 <- df_train[trainingset, ];
validation <- df_train[-trainingset, ]
nearZeroVariance = nearZeroVar(df_train2, saveMetrics=TRUE)
col_nearZeroVariance = nearZeroVar(df_train2, saveMetrics=FALSE)
df_train2 = df_train2[,-col_nearZeroVariance]
df_train2 = df_train2[,-1]
df_train2[is.na(df_train2)] = 0
## Delete columns in test and validation
df_test = df_test[,-col_nearZeroVariance]
df_test = df_test[,-1]
df_test$classe = 0
validation = validation[,-col_nearZeroVariance]
validation = validation[,-1]
## Clean data of NA
df_test[is.na(df_test)] = 0
validation[is.na(validation)] = 0
knitr::opts_chunk$set(echo = TRUE)
install_load <- function (package1, ...){
packages <- c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
set.seed(1337)
install_load("caret","randomForest","rpart","e1071")
df_test <- read.csv(file = "data/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
df_train <- read.csv(file = "data/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
trainingset <- createDataPartition(y=df_train$classe, p=0.6, list=FALSE)
df_train2 <- df_train[trainingset, ];
validation <- df_train[-trainingset, ]
nearZeroVariance = nearZeroVar(df_train2, saveMetrics=TRUE)
View(df_test)
col_nearZeroVariance = nearZeroVar(df_train2, saveMetrics=FALSE)
df_train2 = df_train2[,-col_nearZeroVariance]
df_train2 = df_train2[,-1]
df_train2[is.na(df_train2)] = 0
df_test = df_test[,-1]
## Delete columns in test and validation
df_test = df_test[,-col_nearZeroVariance]
View(df_test)
validation = validation[,-col_nearZeroVariance]
validation = validation[,-1]
## Clean data of NA
df_test[is.na(df_test)] = 0
validation[is.na(validation)] = 0
which(colnames(df_test) != colnames(validation))
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
View(testframe)
?subset
df_test = subset(df_test, select = -problem_id)
df_test$classe = 0
which(colnames(df_test) != colnames(validation))
colnames(df_test)[which(colnames(df_test) != colnames(validation))]
colnames(validation)[which(colnames(df_test) != colnames(validation))]
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.),]
df_test$magnet_dumbbell_z = as.numeric(df_test$magnet_dumbbell_z)
df_test$magnet_forearm_y = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z = as.numeric(df_test$magnet_forearm_z)
df_test$classe  = as.factor(df_test$classe)
df_test$new_window = as.integer(df_test$new_window)
df_test$amplitude_yaw_dumbbell = as.numeric(df_test$amplitude_yaw_dumbbell)
df_test$amplitude_yaw_dumbbell = as.integer(df_test$amplitude_yaw_dumbbell)
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.),]
df_test$magnet_dumbbell_z = as.numeric(df_test$magnet_dumbbell_z)
df_test$magnet_forearm_y = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z = as.numeric(df_test$magnet_forearm_z)
df_test$classe  = as.factor(df_test$classe)
df_test$new_window = as.integer(df_test$new_window)
df_test$amplitude_yaw_dumbbell = as.numeric(df_test$amplitude_yaw_dumbbell)
df_test$amplitude_yaw_forearm = as.integer(df_test$amplitude_yaw_forearm)
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.),]
df_test$magnet_dumbbell_z = as.numeric(df_test$magnet_dumbbell_z)
df_test$magnet_forearm_y = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z = as.numeric(df_test$magnet_forearm_z)
df_test$classe  = as.factor(df_test$classe)
df_test$new_window = as.integer(df_test$new_window)
df_test$amplitude_yaw_dumbbell = as.integer(df_test$amplitude_yaw_dumbbell)
df_test$amplitude_yaw_forearm = as.integer(df_test$amplitude_yaw_forearm)
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.),]
knitr::opts_chunk$set(echo = TRUE)
install_load <- function (package1, ...){
packages <- c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
set.seed(1337)
install_load("caret","randomForest","rpart","e1071")
df_test <- read.csv(file = "data/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
df_train <- read.csv(file = "data/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
trainingset <- createDataPartition(y=df_train$classe, p=0.6, list=FALSE)
df_train2 <- df_train[trainingset, ];
validation <- df_train[-trainingset, ]
nearZeroVariance = nearZeroVar(df_train2, saveMetrics=TRUE)
col_nearZeroVariance = nearZeroVar(df_train2, saveMetrics=FALSE)
df_train2 = df_train2[,-col_nearZeroVariance]
df_train2 = df_train2[,-1]
df_train2[is.na(df_train2)] = 0
## Delete columns in test and validation
df_test = df_test[,-col_nearZeroVariance]
df_test = df_test[,-1]
df_test = subset(df_test, select = -problem_id)
df_test$classe = 0
validation = validation[,-col_nearZeroVariance]
validation = validation[,-1]
## Clean data of NA
df_test[is.na(df_test)] = 0
validation[is.na(validation)] = 0
df_test$magnet_dumbbell_z = as.numeric(df_test$magnet_dumbbell_z)
df_test$magnet_forearm_y = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z = as.numeric(df_test$magnet_forearm_z)
df_test$classe  = as.factor(df_test$classe)
df_test$new_window = as.integer(df_test$new_window)
which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.)
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.),]
df_test$magnet_dumbbell_z = as.numeric(df_test$magnet_dumbbell_z)
df_test$magnet_forearm_y = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z = as.numeric(df_test$magnet_forearm_z)
df_test$classe  = as.factor(df_test$classe)
df_test$new_window = as.integer(df_test$new_window)
df_test$magnet_dumbbell_z = as.numeric(df_test$magnet_dumbbell_z)
df_test$magnet_forearm_y = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z = as.numeric(df_test$magnet_forearm_z)
df_test$classe  = as.factor(df_test$classe)
df_test$new_window = as.integer(df_test$new_window)
df_test$amplitude_yaw_dumbbell = as.integer(df_test$amplitude_yaw_dumbbell)
df_test$classe  = as.factor(df_test$classe)
df_test$new_window = as.integer(df_test$new_window)
df_test$new_window
df_test$new_window
m
##df_test$new_window = as.integer(df_test$new_window)
df_test$amplitude_yaw_dumbbell = as.integer(df_test$amplitude_yaw_dumbbell)
df_test$amplitude_yaw_forearm = as.integer(df_test$amplitude_yaw_forearm)
df_test[,colnames(validation)]
df_test2 = df_test[,colnames(validation)]
View(df_test)
knitr::opts_chunk$set(echo = TRUE)
install_load <- function (package1, ...){
packages <- c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
set.seed(1337)
install_load("caret","randomForest","rpart","e1071")
df_test <- read.csv(file = "data/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
df_train <- read.csv(file = "data/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
trainingset <- createDataPartition(y=df_train$classe, p=0.6, list=FALSE)
df_train2 <- df_train[trainingset, ];
validation <- df_train[-trainingset, ]
nearZeroVariance = nearZeroVar(df_train2, saveMetrics=TRUE)
col_nearZeroVariance = nearZeroVar(df_train2, saveMetrics=FALSE)
df_train2 = df_train2[,-col_nearZeroVariance]
df_train2 = df_train2[,-1]
df_train2[is.na(df_train2)] = 0
## Delete columns in test and validation
df_test = subset(df_test, select = -problem_id)
df_test$classe = 0
df_test = dftest[,colnames(df_train2)]
## Delete columns in test and validation
df_test = subset(df_test, select = -problem_id)
## Delete columns in test and validation
df_test = subset(df_test, select = -problem_id)
df_test = subset(df_test, select = -c(problem_id))
## Delete columns in test and validation
which(df_test = "problem_id")
## Delete columns in test and validation
df_test = df_test[,colnames(df_train2)]
df_test$classe = 0
validation = validation[,colnames(df_train2)]
knitr::opts_chunk$set(echo = TRUE)
install_load <- function (package1, ...){
packages <- c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
set.seed(1337)
install_load("caret","randomForest","rpart","e1071")
df_test <- read.csv(file = "data/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
df_train <- read.csv(file = "data/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
trainingset <- createDataPartition(y=df_train$classe, p=0.6, list=FALSE)
df_train2 <- df_train[trainingset, ];
validation <- df_train[-trainingset, ]
nearZeroVariance = nearZeroVar(df_train2, saveMetrics=TRUE)
col_nearZeroVariance = nearZeroVar(df_train2, saveMetrics=FALSE)
df_train2 = df_train2[,-col_nearZeroVariance]
df_train2 = df_train2[,-1]
df_train2[is.na(df_train2)] = 0
## Delete columns in test and validation
df_test = df_test[,colnames(df_train2)]
colnames(df_train2)
## Delete columns in test and validation
df_test$classe = 0
df_test = df_test[,colnames(df_train2)]
validation = validation[,colnames(df_train2)]
## Clean data of NA
df_test[is.na(df_test)] = 0
validation[is.na(validation)] = 0
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.),]
df_test$magnet_dumbbell_z = as.numeric(df_test$magnet_dumbbell_z)
df_test$magnet_forearm_y = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z = as.numeric(df_test$magnet_forearm_z)
df_test$classe  = as.factor(df_test$classe)
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.),]
knitr::opts_chunk$set(echo = TRUE)
install_load <- function (package1, ...){
packages <- c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
set.seed(1337)
install_load("caret","randomForest","rpart","e1071")
df_test <- read.csv(file = "data/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
df_train <- read.csv(file = "data/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
trainingset <- createDataPartition(y=df_train$classe, p=0.6, list=FALSE)
df_train2 <- df_train[trainingset, ];
validation <- df_train[-trainingset, ]
nearZeroVariance = nearZeroVar(df_train2, saveMetrics=TRUE)
col_nearZeroVariance = nearZeroVar(df_train2, saveMetrics=FALSE)
df_train2 = df_train2[,-col_nearZeroVariance]
df_train2 = df_train2[,-1]
df_train2[is.na(df_train2)] = 0
## Delete columns in test and validation
df_test$classe = 0
df_test = df_test[,colnames(df_train2)]
validation = validation[,colnames(df_train2)]
## Clean data of NA
df_test[is.na(df_test)] = 0
validation[is.na(validation)] = 0
df_test$magnet_dumbbell_z = as.numeric(df_test$magnet_dumbbell_z)
df_test$magnet_forearm_y = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z = as.numeric(df_test$magnet_forearm_z)
df_test$classe  = as.factor(df_test$classe)
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.),]
knitr::opts_chunk$set(echo = TRUE)
install_load <- function (package1, ...){
packages <- c(package1, ...)
for(package in packages){
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
else {
install.packages(package)
do.call("library", list(package))
}
}
}
set.seed(1337)
install_load("caret","randomForest","rpart","e1071")
df_test <- read.csv(file = "data/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
df_train <- read.csv(file = "data/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
trainingset <- createDataPartition(y=df_train$classe, p=0.6, list=FALSE)
df_train2 <- df_train[trainingset, ];
validation <- df_train[-trainingset, ]
nearZeroVariance = nearZeroVar(df_train2, saveMetrics=TRUE)
col_nearZeroVariance = nearZeroVar(df_train2, saveMetrics=FALSE)
df_train2 = df_train2[,-col_nearZeroVariance]
df_train2 = df_train2[,-1]
df_train2[is.na(df_train2)] = 0
## Delete columns in test and validation
df_test$classe = 0
df_test = df_test[,colnames(df_train2)]
validation = validation[,colnames(df_train2)]
## Clean data of NA
df_test[is.na(df_test)] = 0
validation[is.na(validation)] = 0
df_test$magnet_dumbbell_z = as.numeric(df_test$magnet_dumbbell_z)
df_test$magnet_forearm_y = as.numeric(df_test$magnet_forearm_y  )
df_test$magnet_forearm_z = as.numeric(df_test$magnet_forearm_z)
df_test$classe  = as.factor(df_test$classe)
testframe = data.frame(sapply(df_test,class),sapply(validation,class))
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.validation..class.),]
tree1 <- rpart(classe ~ ., data=df_train2, method="class")
pred_tree1 <- predict(tree1, validation, type = "class")
confusionMatrix(pred_tree1, validation$classe)
forest1 <- randomForest(classe ~. , data=df_train2)
pred_forest1 <- predict(forest1, validation, type = "class")
confusionMatrix(pred_forest1, validation$classe)
predict(forest1, df_test, type="class")
testframe = data.frame(sapply(df_test,class),sapply(df_train2,class))
testframe[which(testframe$sapply.df_test..class. != testframe$sapply.df_train2..class.),]
testframe
df_test2 = rbind(df_test2,validation[1,])
df_test2 = rbind(df_test,validation[1,])
df_test2 = rbind(validation[1,],df_test)
df_test2 = df_test2[-1,]
predict(forest1, df_test2, type="class")
set.seed(1337)
install_load("caret","randomForest","rpart","e1071")
